txt = <<"EOS"
3
7 4
2 4 6
8 5 9 3
EOS

# ヒアドキュメント
txt2 = <<"EOS"
75
95 64
17 47 82
18 35 87 10
20 04 82 47 65
19 01 23 75 03 34
88 02 77 73 07 63 67
99 65 04 28 06 16 70 92
41 41 26 56 83 40 80 70 33
41 48 72 33 47 32 37 16 94 29
53 71 44 65 25 43 91 52 97 51 14
70 11 33 28 77 73 17 78 39 68 17 57
91 71 52 38 17 14 91 43 58 50 27 29 48
63 66 04 68 89 53 67 30 73 16 69 87 40 31
04 62 98 27 23 09 70 98 73 93 38 53 60 04 23
EOS

# 段ごとに配列に格納する、
# 格納した値をmapでくるむ
p data = txt2.split("\n").map{|n| n.split("").map{|k| k.to_i}}

num = data.length - 1

# 配列の和を求める関数オブジェクトを作る
sum = ->(a){ a.inject(:+) }

all = (0..2**num-1).map{|i|
                        # ルートを 2 進法で求める( 0 なら直下、1なら右下へ )
                        route = sprintf("%0#{num}b", i).scan(/./).map{|e| e.to_i }
                        # x方向のインデックスを導出
                        # ( 右下を選んだ回数が x方向のインデックスになる)
                        xidxs = [0] + (0..num-1).map{|idx| sum[route[0..idx]] }
                        # 配列を参照し、ルートで通った数字を配列に格納する

                        vals  = xidxs.each_with_index.map{|x,y| data[y][x] }
                        sum[vals]
                        }

p all.max
